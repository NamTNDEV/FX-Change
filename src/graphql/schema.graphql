scalar Date
scalar File

type Query {
  users: [User!]!
  comments: [Comment]!
  stuff: [Stuff!]!
  getStuffById(id: ID!): Stuff
  getCommentsByStuffId(stuffId: ID!): [Comment!]!
  getSaleStuff: [Stuff!]!
  stuffByTypeSlug(typeSlug: String!): [Stuff!]!
  types: [Type!]!
  typeBySlug(slug: String!): Type!
  categories: [Category!]!
  categoryBySlug(slug: String!): Category!
}

type Mutation {
  createStuff(input: StuffInput): Stuff!
  createType(name: String): Type!
  updateSaleStuff(
    stuffId: ID!
    name: String
    description: String
    type_id: String
    category_id: String
    address: String
    condition: Int
    price: Int
    start_price: Int
    final_price: Int
    step: Int
    media: [String]
  ): Stuff!
  deleteStuff(stuffId: ID!): String!
}

type User {
  id: ID
  information: Information
  role: Role
  point: Int
  invitation_code: String
  status: String
  create_at: String
  update_at: String
  attendance_dates: [Date]!
}

type Comment {
  id: ID
  author: User
  author_id: String
  content: String
  parent: Comment
  stuff: Stuff
  stuff_id: ID
  create_at: Date
  update_at: Date
}

type Stuff {
  id: ID
  author: User
  name: String
  description: String
  category: Category
  address: String
  comments: [Comment]!
  condition: Int
  custom_field: StuffCustomField
  media: [String]!
  status: Int
  type: Type
  transactions: [Transaction]!
  create_at: Date
  update_at: Date
  tags: [TagWithStuffValue]
}

type Type {
  id: ID
  name: String
  slug: String
}

type StuffCustomField {
  final_price: Int
  price: Int
  step: Int
  start_price: Int
}

type Transaction {
  id: ID
  custom_field: TransactionCustomField
  customer: User!
  status: Int
  stuff: Stuff!
  create_at: Date
  update_at: Date
}

type TransactionCustomField {
  final_price: Int
  price: Int
  step: Int
}

type Category {
  id: ID
  name: String
  slug: String
}

type Information {
  email: String
  full_name: String
  phone: [String]!
  address: [String]!
  avatar_url: String!
}

type Role {
  id: String
  name: String
}

type Tags {
  id: ID
  name: String
  value: [String]
  stuffs: [TagWithStuffValue]
}

type TagWithStuffValue {
  id: ID
  tag_id: ID
  tag: Tags
  value: String
  stuff_id: String
  stuff: Stuff
}

input TagWithStuffValueInput {
  tag_id: ID
  value: String
}

input StuffInput {
  author_id: String!
  name: String!
  type_id: ID!
  description: String
  category_id: ID!
  condition: Int!
  custom_field: StuffCustomFieldInput
  media: [String]!
  tags: [TagWithStuffValueInput]
}

input StuffCustomFieldInput {
  final_price: Int
  price: Int
  step: Int
  start_price: Int
}
